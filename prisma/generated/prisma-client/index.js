/**
 * @flow
 */

// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import type { DocumentNode } from "graphql";
import type { BasePrismaOptions as BPOType } from "prisma-client-lib";
import { makePrismaClientClass, Model } from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

type NodePromise = Promise<Node>;

export type AtLeastOne<T> = $Shape<T>;

export interface Exists {
  currency(where?: CurrencyWhereInput): Promise<boolean>;
  heroku(where?: HerokuWhereInput): Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface PrismaInterface {
  $exists: Exists;
  $graphql: <T: any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  currency: (where: CurrencyWhereUniqueInput) => CurrencyNullablePromise;
  currencies: (args?: {
    where?: CurrencyWhereInput,
    orderBy?: CurrencyOrderByInput,
    skip?: Int,
    after?: String,
    before?: String,
    first?: Int,
    last?: Int
  }) => FragmentableArray<Currency>;
  currenciesConnection: (args?: {
    where?: CurrencyWhereInput,
    orderBy?: CurrencyOrderByInput,
    skip?: Int,
    after?: String,
    before?: String,
    first?: Int,
    last?: Int
  }) => CurrencyConnectionPromise;
  heroku: (where: HerokuWhereUniqueInput) => HerokuNullablePromise;
  herokus: (args?: {
    where?: HerokuWhereInput,
    orderBy?: HerokuOrderByInput,
    skip?: Int,
    after?: String,
    before?: String,
    first?: Int,
    last?: Int
  }) => FragmentableArray<Heroku>;
  herokusConnection: (args?: {
    where?: HerokuWhereInput,
    orderBy?: HerokuOrderByInput,
    skip?: Int,
    after?: String,
    before?: String,
    first?: Int,
    last?: Int
  }) => HerokuConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createCurrency: (data: CurrencyCreateInput) => CurrencyPromise;
  updateCurrency: (args: {
    data: CurrencyUpdateInput,
    where: CurrencyWhereUniqueInput
  }) => CurrencyPromise;
  updateManyCurrencies: (args: {
    data: CurrencyUpdateManyMutationInput,
    where?: CurrencyWhereInput
  }) => BatchPayloadPromise;
  upsertCurrency: (args: {
    where: CurrencyWhereUniqueInput,
    create: CurrencyCreateInput,
    update: CurrencyUpdateInput
  }) => CurrencyPromise;
  deleteCurrency: (where: CurrencyWhereUniqueInput) => CurrencyPromise;
  deleteManyCurrencies: (where?: CurrencyWhereInput) => BatchPayloadPromise;
  createHeroku: (data: HerokuCreateInput) => HerokuPromise;
  updateHeroku: (args: {
    data: HerokuUpdateInput,
    where: HerokuWhereUniqueInput
  }) => HerokuPromise;
  updateManyHerokus: (args: {
    data: HerokuUpdateManyMutationInput,
    where?: HerokuWhereInput
  }) => BatchPayloadPromise;
  upsertHeroku: (args: {
    where: HerokuWhereUniqueInput,
    create: HerokuCreateInput,
    update: HerokuUpdateInput
  }) => HerokuPromise;
  deleteHeroku: (where: HerokuWhereUniqueInput) => HerokuPromise;
  deleteManyHerokus: (where?: HerokuWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  currency: (
    where?: CurrencySubscriptionWhereInput
  ) => CurrencySubscriptionPayloadSubscription;
  heroku: (
    where?: HerokuSubscriptionWhereInput
  ) => HerokuSubscriptionPayloadSubscription;
}

export type ClientConstructor<T> = (options?: BPOType) => T;

/**
 * Types
 */

export type CurrencyOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "nameEng_ASC"
  | "nameEng_DESC"
  | "nominal_ASC"
  | "nominal_DESC"
  | "charCode_ASC"
  | "charCode_DESC"
  | "value_ASC"
  | "value_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type HerokuOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "result_ASC"
  | "result_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type CurrencyWhereUniqueInput = {
  id?: ID_Input,
  name?: String,
  nameEng?: String,
  charCode?: String
};

export type CurrencyWhereInput = {
  id?: ID_Input,
  id_not?: ID_Input,
  id_in?: ID_Input[],
  id_not_in?: ID_Input[],
  id_lt?: ID_Input,
  id_lte?: ID_Input,
  id_gt?: ID_Input,
  id_gte?: ID_Input,
  id_contains?: ID_Input,
  id_not_contains?: ID_Input,
  id_starts_with?: ID_Input,
  id_not_starts_with?: ID_Input,
  id_ends_with?: ID_Input,
  id_not_ends_with?: ID_Input,
  name?: String,
  name_not?: String,
  name_in?: String[],
  name_not_in?: String[],
  name_lt?: String,
  name_lte?: String,
  name_gt?: String,
  name_gte?: String,
  name_contains?: String,
  name_not_contains?: String,
  name_starts_with?: String,
  name_not_starts_with?: String,
  name_ends_with?: String,
  name_not_ends_with?: String,
  nameEng?: String,
  nameEng_not?: String,
  nameEng_in?: String[],
  nameEng_not_in?: String[],
  nameEng_lt?: String,
  nameEng_lte?: String,
  nameEng_gt?: String,
  nameEng_gte?: String,
  nameEng_contains?: String,
  nameEng_not_contains?: String,
  nameEng_starts_with?: String,
  nameEng_not_starts_with?: String,
  nameEng_ends_with?: String,
  nameEng_not_ends_with?: String,
  nominal?: Int,
  nominal_not?: Int,
  nominal_in?: Int[],
  nominal_not_in?: Int[],
  nominal_lt?: Int,
  nominal_lte?: Int,
  nominal_gt?: Int,
  nominal_gte?: Int,
  charCode?: String,
  charCode_not?: String,
  charCode_in?: String[],
  charCode_not_in?: String[],
  charCode_lt?: String,
  charCode_lte?: String,
  charCode_gt?: String,
  charCode_gte?: String,
  charCode_contains?: String,
  charCode_not_contains?: String,
  charCode_starts_with?: String,
  charCode_not_starts_with?: String,
  charCode_ends_with?: String,
  charCode_not_ends_with?: String,
  value?: Float,
  value_not?: Float,
  value_in?: Float[],
  value_not_in?: Float[],
  value_lt?: Float,
  value_lte?: Float,
  value_gt?: Float,
  value_gte?: Float,
  updatedAt?: DateTimeInput,
  updatedAt_not?: DateTimeInput,
  updatedAt_in?: DateTimeInput[],
  updatedAt_not_in?: DateTimeInput[],
  updatedAt_lt?: DateTimeInput,
  updatedAt_lte?: DateTimeInput,
  updatedAt_gt?: DateTimeInput,
  updatedAt_gte?: DateTimeInput,
  createdAt?: DateTimeInput,
  createdAt_not?: DateTimeInput,
  createdAt_in?: DateTimeInput[],
  createdAt_not_in?: DateTimeInput[],
  createdAt_lt?: DateTimeInput,
  createdAt_lte?: DateTimeInput,
  createdAt_gt?: DateTimeInput,
  createdAt_gte?: DateTimeInput,
  AND?: CurrencyWhereInput[],
  OR?: CurrencyWhereInput[],
  NOT?: CurrencyWhereInput[]
};

export type HerokuWhereUniqueInput = {
  id?: ID_Input
};

export type HerokuWhereInput = {
  id?: ID_Input,
  id_not?: ID_Input,
  id_in?: ID_Input[],
  id_not_in?: ID_Input[],
  id_lt?: ID_Input,
  id_lte?: ID_Input,
  id_gt?: ID_Input,
  id_gte?: ID_Input,
  id_contains?: ID_Input,
  id_not_contains?: ID_Input,
  id_starts_with?: ID_Input,
  id_not_starts_with?: ID_Input,
  id_ends_with?: ID_Input,
  id_not_ends_with?: ID_Input,
  result?: String,
  result_not?: String,
  result_in?: String[],
  result_not_in?: String[],
  result_lt?: String,
  result_lte?: String,
  result_gt?: String,
  result_gte?: String,
  result_contains?: String,
  result_not_contains?: String,
  result_starts_with?: String,
  result_not_starts_with?: String,
  result_ends_with?: String,
  result_not_ends_with?: String,
  updatedAt?: DateTimeInput,
  updatedAt_not?: DateTimeInput,
  updatedAt_in?: DateTimeInput[],
  updatedAt_not_in?: DateTimeInput[],
  updatedAt_lt?: DateTimeInput,
  updatedAt_lte?: DateTimeInput,
  updatedAt_gt?: DateTimeInput,
  updatedAt_gte?: DateTimeInput,
  createdAt?: DateTimeInput,
  createdAt_not?: DateTimeInput,
  createdAt_in?: DateTimeInput[],
  createdAt_not_in?: DateTimeInput[],
  createdAt_lt?: DateTimeInput,
  createdAt_lte?: DateTimeInput,
  createdAt_gt?: DateTimeInput,
  createdAt_gte?: DateTimeInput,
  AND?: HerokuWhereInput[],
  OR?: HerokuWhereInput[],
  NOT?: HerokuWhereInput[]
};

export type CurrencyCreateInput = {
  name: String,
  nameEng?: String,
  nominal: Int,
  charCode: String,
  value: Float
};

export type CurrencyUpdateInput = {
  name?: String,
  nameEng?: String,
  nominal?: Int,
  charCode?: String,
  value?: Float
};

export type CurrencyUpdateManyMutationInput = {
  name?: String,
  nameEng?: String,
  nominal?: Int,
  charCode?: String,
  value?: Float
};

export type HerokuCreateInput = {
  result: String
};

export type HerokuUpdateInput = {
  result?: String
};

export type HerokuUpdateManyMutationInput = {
  result?: String
};

export type CurrencySubscriptionWhereInput = {
  mutation_in?: MutationType[],
  updatedFields_contains?: String,
  updatedFields_contains_every?: String[],
  updatedFields_contains_some?: String[],
  node?: CurrencyWhereInput,
  AND?: CurrencySubscriptionWhereInput[],
  OR?: CurrencySubscriptionWhereInput[],
  NOT?: CurrencySubscriptionWhereInput[]
};

export type HerokuSubscriptionWhereInput = {
  mutation_in?: MutationType[],
  updatedFields_contains?: String,
  updatedFields_contains_every?: String[],
  updatedFields_contains_some?: String[],
  node?: HerokuWhereInput,
  AND?: HerokuSubscriptionWhereInput[],
  OR?: HerokuSubscriptionWhereInput[],
  NOT?: HerokuSubscriptionWhereInput[]
};

export interface NodeNode {
  id: ID_Output;
}

export interface Currency {
  id: ID_Output;
  name: String;
  nameEng?: String;
  nominal: Int;
  charCode: String;
  value: Float;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface CurrencyPromise extends Promise<Currency>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  nameEng: () => Promise<String>;
  nominal: () => Promise<Int>;
  charCode: () => Promise<String>;
  value: () => Promise<Float>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface CurrencySubscription
  extends Promise<AsyncIterator<Currency>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  nameEng: () => Promise<AsyncIterator<String>>;
  nominal: () => Promise<AsyncIterator<Int>>;
  charCode: () => Promise<AsyncIterator<String>>;
  value: () => Promise<AsyncIterator<Float>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CurrencyNullablePromise
  extends Promise<Currency | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  nameEng: () => Promise<String>;
  nominal: () => Promise<Int>;
  charCode: () => Promise<String>;
  value: () => Promise<Float>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface CurrencyConnection {
  pageInfo: PageInfo;
  edges: CurrencyEdge[];
}

export interface CurrencyConnectionPromise
  extends Promise<CurrencyConnection>,
    Fragmentable {
  pageInfo: <T: PageInfoPromise>() => T;
  edges: <T: FragmentableArray<CurrencyEdge>>() => T;
  aggregate: <T: AggregateCurrencyPromise>() => T;
}

export interface CurrencyConnectionSubscription
  extends Promise<AsyncIterator<CurrencyConnection>>,
    Fragmentable {
  pageInfo: <T: PageInfoSubscription>() => T;
  edges: <T: Promise<AsyncIterator<CurrencyEdgeSubscription>>>() => T;
  aggregate: <T: AggregateCurrencySubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface CurrencyEdge {
  node: Currency;
  cursor: String;
}

export interface CurrencyEdgePromise
  extends Promise<CurrencyEdge>,
    Fragmentable {
  node: <T: CurrencyPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CurrencyEdgeSubscription
  extends Promise<AsyncIterator<CurrencyEdge>>,
    Fragmentable {
  node: <T: CurrencySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCurrency {
  count: Int;
}

export interface AggregateCurrencyPromise
  extends Promise<AggregateCurrency>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCurrencySubscription
  extends Promise<AsyncIterator<AggregateCurrency>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Heroku {
  id: ID_Output;
  result: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface HerokuPromise extends Promise<Heroku>, Fragmentable {
  id: () => Promise<ID_Output>;
  result: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface HerokuSubscription
  extends Promise<AsyncIterator<Heroku>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  result: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface HerokuNullablePromise
  extends Promise<Heroku | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  result: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface HerokuConnection {
  pageInfo: PageInfo;
  edges: HerokuEdge[];
}

export interface HerokuConnectionPromise
  extends Promise<HerokuConnection>,
    Fragmentable {
  pageInfo: <T: PageInfoPromise>() => T;
  edges: <T: FragmentableArray<HerokuEdge>>() => T;
  aggregate: <T: AggregateHerokuPromise>() => T;
}

export interface HerokuConnectionSubscription
  extends Promise<AsyncIterator<HerokuConnection>>,
    Fragmentable {
  pageInfo: <T: PageInfoSubscription>() => T;
  edges: <T: Promise<AsyncIterator<HerokuEdgeSubscription>>>() => T;
  aggregate: <T: AggregateHerokuSubscription>() => T;
}

export interface HerokuEdge {
  node: Heroku;
  cursor: String;
}

export interface HerokuEdgePromise extends Promise<HerokuEdge>, Fragmentable {
  node: <T: HerokuPromise>() => T;
  cursor: () => Promise<String>;
}

export interface HerokuEdgeSubscription
  extends Promise<AsyncIterator<HerokuEdge>>,
    Fragmentable {
  node: <T: HerokuSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateHeroku {
  count: Int;
}

export interface AggregateHerokuPromise
  extends Promise<AggregateHeroku>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateHerokuSubscription
  extends Promise<AsyncIterator<AggregateHeroku>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface CurrencySubscriptionPayload {
  mutation: MutationType;
  node: Currency;
  updatedFields: String[];
  previousValues: CurrencyPreviousValues;
}

export interface CurrencySubscriptionPayloadPromise
  extends Promise<CurrencySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T: CurrencyPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T: CurrencyPreviousValuesPromise>() => T;
}

export interface CurrencySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CurrencySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T: CurrencySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T: CurrencyPreviousValuesSubscription>() => T;
}

export interface CurrencyPreviousValues {
  id: ID_Output;
  name: String;
  nameEng?: String;
  nominal: Int;
  charCode: String;
  value: Float;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface CurrencyPreviousValuesPromise
  extends Promise<CurrencyPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  nameEng: () => Promise<String>;
  nominal: () => Promise<Int>;
  charCode: () => Promise<String>;
  value: () => Promise<Float>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface CurrencyPreviousValuesSubscription
  extends Promise<AsyncIterator<CurrencyPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  nameEng: () => Promise<AsyncIterator<String>>;
  nominal: () => Promise<AsyncIterator<Int>>;
  charCode: () => Promise<AsyncIterator<String>>;
  value: () => Promise<AsyncIterator<Float>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface HerokuSubscriptionPayload {
  mutation: MutationType;
  node: Heroku;
  updatedFields: String[];
  previousValues: HerokuPreviousValues;
}

export interface HerokuSubscriptionPayloadPromise
  extends Promise<HerokuSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T: HerokuPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T: HerokuPreviousValuesPromise>() => T;
}

export interface HerokuSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<HerokuSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T: HerokuSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T: HerokuPreviousValuesSubscription>() => T;
}

export interface HerokuPreviousValues {
  id: ID_Output;
  result: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface HerokuPreviousValuesPromise
  extends Promise<HerokuPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  result: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface HerokuPreviousValuesSubscription
  extends Promise<AsyncIterator<HerokuPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  result: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Currency",
    embedded: false
  },
  {
    name: "Heroku",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma: ClientConstructor<PrismaInterface> = makePrismaClientClass(
  {
    typeDefs,
    models,
    endpoint: `${process.env["PRISMA_ENDPOINT"] || ""}`,
    secret: `${process.env["PRISMA_SECRET"] || ""}`
  }
);

export const prisma = new Prisma();
